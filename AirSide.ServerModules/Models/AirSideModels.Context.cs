//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AirSide.ServerModules.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<as_accessProfile> as_accessProfile { get; set; }
        public virtual DbSet<as_airportProfile> as_airportProfile { get; set; }
        public virtual DbSet<as_areaProfile> as_areaProfile { get; set; }
        public virtual DbSet<as_areaSubProfile> as_areaSubProfile { get; set; }
        public virtual DbSet<as_assetClassMaintenanceProfile> as_assetClassMaintenanceProfile { get; set; }
        public virtual DbSet<as_assetClassProfile> as_assetClassProfile { get; set; }
        public virtual DbSet<as_assetInfoProfile> as_assetInfoProfile { get; set; }
        public virtual DbSet<as_assetProfile> as_assetProfile { get; set; }
        public virtual DbSet<as_eventPofile> as_eventPofile { get; set; }
        public virtual DbSet<as_eventTypes> as_eventTypes { get; set; }
        public virtual DbSet<as_fileUploadProfile> as_fileUploadProfile { get; set; }
        public virtual DbSet<as_frequencyProfile> as_frequencyProfile { get; set; }
        public virtual DbSet<as_geoSpatialProfile> as_geoSpatialProfile { get; set; }
        public virtual DbSet<as_locationProfile> as_locationProfile { get; set; }
        public virtual DbSet<as_maintenanceCategory> as_maintenanceCategory { get; set; }
        public virtual DbSet<as_maintenanceCheckListDef> as_maintenanceCheckListDef { get; set; }
        public virtual DbSet<as_maintenanceCheckListEntity> as_maintenanceCheckListEntity { get; set; }
        public virtual DbSet<as_maintenanceProfile> as_maintenanceProfile { get; set; }
        public virtual DbSet<as_maintenanceValidation> as_maintenanceValidation { get; set; }
        public virtual DbSet<as_pictureProfile> as_pictureProfile { get; set; }
        public virtual DbSet<as_settingsProfile> as_settingsProfile { get; set; }
        public virtual DbSet<as_technicianGroupProfile> as_technicianGroupProfile { get; set; }
        public virtual DbSet<as_technicianGroups> as_technicianGroups { get; set; }
        public virtual DbSet<as_technicianWrenchProfile> as_technicianWrenchProfile { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<as_fileUploadInfo> as_fileUploadInfo { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<as_shiftsCustomProfile> as_shiftsCustomProfile { get; set; }
        public virtual DbSet<as_shifts> as_shifts { get; set; }
        public virtual DbSet<as_shiftData> as_shiftData { get; set; }
        public virtual DbSet<as_multiAssetProfile> as_multiAssetProfile { get; set; }
        public virtual DbSet<as_assetStatusProfile> as_assetStatusProfile { get; set; }
        public virtual DbSet<as_photometricProfile> as_photometricProfile { get; set; }
        public virtual DbSet<as_validationTaskProfile> as_validationTaskProfile { get; set; }
    
        public virtual ObjectResult<as_get_closest_point_to_gps_coordinate1_Result> as_get_closest_point_to_gps_coordinate(Nullable<double> latitude, Nullable<double> longitude)
        {
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<as_get_closest_point_to_gps_coordinate1_Result>("as_get_closest_point_to_gps_coordinate", latitudeParameter, longitudeParameter);
        }
    }
}
