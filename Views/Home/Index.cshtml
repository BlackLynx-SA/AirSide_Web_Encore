<!-- MAIN CONTENT -->
<div id="content">
    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark"><i class="fa-fw fa fa-home"></i> Dashboard <span>> My Dashboard</span></h1>
        </div>
        <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">
            <ul id="sparks" class="">
                <li class="sparks-info">
                    <h5> Number of Assets <span class="txt-color-blue"><i class="fa fa-lightbulb-o"></i> @ViewBag.NumberAssets</span></h5>
                    <div class="sparkline txt-color-blue hidden-mobile hidden-md hidden-sm">
                        @ViewBag.AssetInit
                    </div>
                </li>
                <li class="sparks-info">
                    <h5> Loaded Users <span class="txt-color-purple"><i class="fa fa-users"></i> @ViewBag.NumberUsers</span></h5>
                </li>
                <li class="sparks-info">
                    <h5> Active Shifts <span class="txt-color-greenDark"><i class="fa fa-calendar"></i> @ViewBag.NumberActiveShifts</span></h5>
                    <div class="sparkline txt-color-greenDark hidden-mobile hidden-md hidden-sm">
                        @ViewBag.CompletedShifts
                    </div>
                </li>
            </ul>
        </div>
    </div>
    <!-- widget grid -->
    <section id="widget-grid" class="">
        <!-- row -->
        <div class="row">
            <article class="col-sm-12">
                <!-- new widget -->
                <div class="jarviswidget" id="wid-id-0" data-widget-togglebutton="false" data-widget-editbutton="false" data-widget-fullscreenbutton="false" data-widget-colorbutton="false" data-widget-deletebutton="false">
                    <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"

                    -->
                    <header>
                        <span class="widget-icon"> <i class="glyphicon glyphicon-stats txt-color-darken"></i> </span>
                        <h2>AirSide&trade; Activity (Last 30 days)</h2>
                        <ul class="nav nav-tabs pull-right in" id="myTab">
                            <li class="active">
                                <a data-toggle="tab" href="#s1"><i class="fa fa-clock-o"></i> <span class="hidden-mobile hidden-tablet">Live Stats</span></a>
                            </li>
                        </ul>
                    </header>
                    <!-- widget div-->
                    <div class="no-padding">
                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            test
                        </div>
                        <!-- end widget edit box -->
                        <div class="widget-body">
                            <!-- content -->
                            <div id="myTabContent" class="tab-content">
                                <div class="tab-pane fade active in padding-10 no-padding-bottom" id="s1">
                                    @{Html.RenderPartial("_ActivityChart");}
                                    <div class="show-stat-microcharts">
                                        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
                                            <div class="easy-pie-chart txt-color-green" data-percent="@ViewBag.completedMaint" data-pie-size="50">
                                                <span class="percent percent-sign">@ViewBag.completedMaint</span>
                                            </div>
                                            <span class="easy-pie-title"> Updated </span>
                                            <ul class="smaller-stat hidden-sm pull-right">
                                                <li>
                                                    <span class="label bg-color-green"> @{ double numberAssets = double.Parse(ViewBag.totalTasks) * (double.Parse(ViewBag.completedMaint) / 100); } @Math.Round(numberAssets,0) </span>
                                                </li>
                                                <li>
                                                    <span class="label bg-color-green"> @ViewBag.totalTasks</span>
                                                </li>
                                            </ul>
                                        </div>
                                        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
                                            <div class="easy-pie-chart text-warning" data-percent="@ViewBag.midMaint" data-pie-size="50">
                                                <span class="percent percent-sign">@ViewBag.midMaint</span>
                                            </div>
                                            <span class="easy-pie-title"> Mid Cycle </span>
                                            <ul class="smaller-stat hidden-sm pull-right">
                                                <li>
                                                    <span class="label bg-color-yellow"> @{ numberAssets = double.Parse(ViewBag.totalTasks) * (double.Parse(ViewBag.midMaint) / 100); } @Math.Round(numberAssets, 0) </span>
                                                </li>
                                                <li>
                                                    <span class="label bg-color-yellow"> @ViewBag.totalTasks</span>
                                                </li>
                                            </ul>
                                        </div>
                                        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
                                            <div class="easy-pie-chart txt-color-pink" data-percent="@ViewBag.almostMaint" data-pie-size="50">
                                                <span class="percent percent-sign">@ViewBag.almostMaint</span>
                                            </div>
                                            <span class="easy-pie-title"> Almost Due </span>
                                            <ul class="smaller-stat hidden-sm pull-right">
                                                <li>
                                                    <span class="label bg-color-pink"> @{ numberAssets = double.Parse(ViewBag.totalTasks) * (double.Parse(ViewBag.almostMaint) / 100); } @Math.Round(numberAssets, 0) </span>
                                                </li>
                                                <li>
                                                    <span class="label bg-color-pink"> @ViewBag.totalTasks</span>
                                                </li>
                                            </ul>
                                        </div>
                                        <div class="col-xs-12 col-sm-3 col-md-3 col-lg-3">
                                            <div class="easy-pie-chart txt-color-red" data-percent="@ViewBag.dueAssets" data-pie-size="50">
                                                <span class="percent percent-sign">@ViewBag.dueAssets</span>
                                            </div>
                                            <span class="easy-pie-title"> Over Due </span>
                                            <ul class="smaller-stat hidden-sm pull-right">
                                                <li>
                                                    <span class="label bg-color-red"> @{ numberAssets = double.Parse(ViewBag.totalTasks) * (double.Parse(ViewBag.dueAssets) / 100); } @Math.Round(numberAssets, 0) </span>
                                                </li>
                                                <li>
                                                    <span class="label bg-color-red"> @ViewBag.totalTasks</span>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <!-- end s1 tab pane -->
                            </div>
                            <!-- end content -->
                        </div>
                    </div>
                    <!-- end widget div -->
                </div>
                <!-- end widget -->
            </article>
        </div>
        <!-- end row -->
        <!-- row -->
        <div class="row">
            <article class="col-sm-12 col-md-12 col-lg-6">
                <!-- new widget -->
                <!-- end widget -->
                <!-- new widget -->
                    @{Html.RenderPartial("_CalendarView");}
                <!-- end widget -->
            </article>
            <article class="col-sm-12 col-md-12 col-lg-6">
                <!-- new widget -->
                    @{Html.RenderPartial("_MapView");}
                <!-- end widget -->

                <!-- ToDo Widget -->
                    @{Html.RenderPartial("_ToDoView");}
                <!-- end ToDo Widget -->

            </article>
        </div>
        <!-- end row -->
    </section>
    <!-- end widget grid -->
</div>
<!-- END MAIN CONTENT -->
@section pagespecific {
<script src="~/scripts/plugin/date/date.js"></script>
    <script>
        /* chart colors default */
        var $chrt_border_color = "#efefef";
        var $chrt_grid_color = "#DDD"
        var $chrt_main = "#E24913";
        /* red       */
        var $chrt_second = "#6595b4";
        /* blue      */
        var $chrt_third = "#FF9F01";
        /* orange    */
        var $chrt_fourth = "#7e9d3a";
        /* green     */
        var $chrt_fifth = "#BD362F";
        /* dark red  */
        var $chrt_mono = "#000";

        var todoCategoriesTxt;
        var selectedTask = @ViewBag.firstTask;

        function getActivities()
        {
            $.ajax({
                type: "POST",
                url: "../../Home/getActivities",
                success: function (json) {
                    if ($("#saleschart").length) {
                        var d = [];
                        $.each(json, function(i,v){
                            var plot = [];
                            plot.push(v.dateOfActivity);
                            plot.push(v.numberOfActivities);
                            d.push(plot);
                        });

                        for (var i = 0; i < d.length; ++i)
                            d[i][0] += 60 * 60 * 1000;

                        function weekendAreas(axes) {
                            var markings = [];
                            var d = new Date(axes.xaxis.min);
                            // go to the first Saturday
                            d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
                            d.setUTCSeconds(0);
                            d.setUTCMinutes(0);
                            d.setUTCHours(0);
                            var i = d.getTime();
                            do {
                                // when we don't set yaxis, the rectangle automatically
                                // extends to infinity upwards and downwards
                                markings.push({
                                    xaxis : {
                                        from : i,
                                        to : i + 2 * 24 * 60 * 60 * 1000
                                    }
                                });
                                i += 7 * 24 * 60 * 60 * 1000;
                            } while (i < axes.xaxis.max);

                            return markings;
                        }

                        var options = {
                            xaxis : {
                                mode : "time",
                            },
                            series : {
                                lines : {
                                    show : true,
                                    lineWidth : 1,
                                    fill : true,
                                    fillColor : {
                                        colors : [{
                                            opacity : 0.1
                                        }, {
                                            opacity : 0.15
                                        }]
                                    }
                                },
                                points: { show: true },
                                shadowSize : 0
                            },
                            selection : {
                                mode : "x"
                            },
                            grid : {
                                hoverable : true,
                                clickable : true,
                                tickColor : $chrt_border_color,
                                borderWidth : 0,
                                borderColor : $chrt_border_color,
                            },
                            tooltip : true,
                            tooltipOpts : {
                                content : "Activities were <span>%y</span>",
                                dateFormat : "%y-%0m-%0d",
                                defaultTheme : false
                            },
                            colors : [$chrt_second],

                        };

                        var plot = $.plot($("#saleschart"), [d], options);
                        $('#activityChartLoader').fadeOut(300);
                    };
                }
            });
        }

        function getTodoCategories() {
            $.ajax({
                type: "POST",
                url: "../../Home/getTodoCategories",
                success: function (json) {
                    var allCategories;
                    $.each(json, function (i, v) {
                        var html = '<h5 class="todo-group-title"><i class="fa ' + v.vc_icon + '"></i> ' + v.vc_description + ' (<small class="num-of-tasks">0</small>)</h5>';
                        html += '<ul id="cat_' + v.i_todoCatId + '" class="todo"></ul>';
                        $('#todoDiv').append(html);

                        if (i === 0)
                            allCategories = '#cat_' + v.i_todoCatId;
                        else
                            allCategories += ', #cat_' + v.i_todoCatId;

                        //Init Sorting
                        $('#cat_' + v.i_todoCatId).sortable({
                            handle: '.handle',
                            connectWith: ".todo",
                            update: countTasks
                        }).disableSelection();

                        todoCategoriesTxt += '[' + v.vc_description + ']';
                    });

                    //Init Completed Tasks
                    var html = '<h5 class="todo-group-title"><i class="fa fa-check"></i> Completed Tasks (<small class="num-of-tasks">0</small>)</h5><ul id="sortable3" class="todo"></ul>';
                    $('#todoDiv').append(html);

                    //Show ToDo
                    $('#todoLoader').hide();
                    $('#todoDiv').fadeIn(500);
                    $("#todoAddBtn").removeClass('disabled');
                    getAllToDos();

                    // initialize sortable
                    $(function () {
                        $(allCategories).sortable({
                            handle: '.handle',
                            connectWith: ".todo",
                            update: countTasks
                        }).disableSelection();
                    });


                }
            });
        }

        function getAllToDos()
        {
            $.ajax({
                type: "POST",
                url: "../../Home/getAllTodos",
                success: function (json) {
                    $.each(json, function (i, v) {
                        insertTodoItem(v);
                    });
                    bindToDo();
                    countTasks();
                }
            });
        }

            // count tasks
            function countTasks() {

                $('.todo-group-title').each(function () {
                    var $this = $(this);
                    $this.find(".num-of-tasks").text($this.next().find("li").size());
                });
            }

            function setTodoStatus(id)
            {
                $.ajax({
                    type: "POST",
                    url: "../../Home/setToDoStatus?todoId=" + id,
                    data: $('<form>@Html.AntiForgeryToken()</form>').serialize(),
                    success: function (json) {

                    }
                });
            }

            function insertTodoItem(json) {
                if (json.bt_active === true) {
                    var html = '<li data-todoid="' + json.i_todoProfileId + '"><span class="handle"><label class="checkbox"><input type="checkbox" name="checkbox-inline"><i></i></label></span>';
                    html += '<p><strong>Item #' + json.i_todoProfileId + '</strong> - ' + json.vc_description + ' <span class="text-muted"></span>';
                    html += '<span class="date">' + json.date + '</span></p></li>';
                    $('#cat_' + json.i_todoCatId).append(html);
                } else {
                    var html = '<li class="complete"><span class="handle" style="display:none"><label class="checkbox state-disabled"><input type="checkbox" name="checkbox-inline" disabled="disabled"><i></i></label></span>';
                    html += '<p><strong>Item #' + json.i_todoProfileId + '</strong> - ' + json.vc_description + ' <span class="text-muted"></span>';
                    html += '<span class="date">' + json.date + '</span></p></li>';
                    $('#sortable3').append(html);
                }
            }

            function addTodo(desc, cat) {
                $.ajax({
                    type: "POST",
                    url: "../../Home/insertNewTodo?description=" + desc + "&category=" + cat,
                    data: $('<form>@Html.AntiForgeryToken()</form>').serialize(),
                    success: function (json) {
                        var alert = '<p>' + json.vc_description + '</p><small>Date ' + json.date + '</small>';
                        $.bigBox({
                            title: "To-Do Item Created",
                            content: alert,
                            color: "#3276B1",
                            timeout: 5000,
                            icon: "fa fa-bell swing animated",
                        });
                        insertTodoItem(json);
                        bindToDo();
                        countTasks();
                    }
                });
            }

            function bindToDo()
            {
                // check and uncheck
                $('.todo .checkbox > input[type="checkbox"]').click(function () {
                    var $this = $(this).parent().parent().parent();
                    var todoId = $this.attr("data-todoid");

                    if ($(this).prop('checked')) {
                        $this.addClass("complete");

                        // remove this if you want to undo a check list once checked
                        $(this).attr("disabled", true);
                        $(this).parent().hide();

                        //update server
                        setTodoStatus(todoId);

                        // once clicked - add class, copy to memory then remove and add to sortable3
                        $this.slideUp(500, function () {
                            $this.clone().prependTo("#sortable3").effect("highlight", {}, 800);
                            $this.remove();
                            countTasks();
                        });
                    } else {
                        // insert undo code here...
                    }

                });
            }

            $(document).ready(function () {
                //Init ToDo
                getTodoCategories();

                //Init Map
                requestAllAssetData();

                //Init Calendar 
                requestAllShifts();

                //Init Activities Chart
                getActivities();

                //init button clicks
                $(document).on('click', '#todoAddBtn', function () {
                    var itemDesc, itemCat;
                    $.SmartMessageBox({
                        title: '<i class="fa fa-check fa-lg txt-color-blue"></i> New To-Do Item',
                        content: "Please enter the item description",
                        buttons: "[Cancel][Accept]",
                        input: "text",
                        inputValue: "",
                        placeholder: "Enter your to-do item"
                    }, function (ButtonPress, Value) {
                        if (ButtonPress == "Cancel") {
                            return 0;
                        }

                        itemDesc = Value;

                        $.SmartMessageBox({
                            title: '<i class="fa fa-list fa-lg txt-color-blue"></i> Select To-Do Category',
                            content: "Please select a category for the new item",
                            buttons: "[Done]",
                            input: "select",
                            options: todoCategoriesTxt,
                        }, function (ButtonPress, Value) {
                            itemCat = Value;
                            addTodo(itemDesc, itemCat);
                        }
                        );


                    });
                });

                $(".js-status-update a").click(function () {
                    var selText = $(this).text();
                    var $this = $(this);
                    $this.parents('.btn-group').find('.dropdown-toggle').html(selText + ' <span class="caret"></span>');
                    $this.parents('.dropdown-menu').find('li').removeClass('active');
                    $this.parent().addClass('active');
                });




                /*
                * RUN PAGE GRAPHS
                */

                

                

                // TAB THREE GRAPH //
                /* TAB 3: Revenew  */

                $(function () {

                    var trgt = [[1354586000000, 153], [1364587000000, 658], [1374588000000, 198], [1384589000000, 663], [1394590000000, 801], [1404591000000, 1080], [1414592000000, 353], [1424593000000, 749], [1434594000000, 523], [1444595000000, 258], [1454596000000, 688], [1464597000000, 364]], prft = [[1354586000000, 53], [1364587000000, 65], [1374588000000, 98], [1384589000000, 83], [1394590000000, 980], [1404591000000, 808], [1414592000000, 720], [1424593000000, 674], [1434594000000, 23], [1444595000000, 79], [1454596000000, 88], [1464597000000, 36]], sgnups = [[1354586000000, 647], [1364587000000, 435], [1374588000000, 784], [1384589000000, 346], [1394590000000, 487], [1404591000000, 463], [1414592000000, 479], [1424593000000, 236], [1434594000000, 843], [1444595000000, 657], [1454596000000, 241], [1464597000000, 341]], toggles = $("#rev-toggles"), target = $("#flotcontainer");

                    var data = [{
                        label: "Target Profit",
                        data: trgt,
                        bars: {
                            show: true,
                            align: "center",
                            barWidth: 30 * 30 * 60 * 1000 * 80
                        }
                    }, {
                        label: "Actual Profit",
                        data: prft,
                        color: '#3276B1',
                        lines: {
                            show: true,
                            lineWidth: 3
                        },
                        points: {
                            show: true
                        }
                    }, {
                        label: "Actual Signups",
                        data: sgnups,
                        color: '#71843F',
                        lines: {
                            show: true,
                            lineWidth: 1
                        },
                        points: {
                            show: true
                        }
                    }]

                    var options = {
                        grid: {
                            hoverable: true
                        },
                        tooltip: true,
                        tooltipOpts: {
                            //content: '%x - %y',
                            //dateFormat: '%b %y',
                            defaultTheme: false
                        },
                        xaxis: {
                            mode: "time"
                        },
                        yaxes: {
                            tickFormatter: function (val, axis) {
                                return "$" + val;
                            },
                            max: 1200
                        }

                    };

                    plot2 = null;

                    function plotNow() {
                        var d = [];
                        toggles.find(':checkbox').each(function () {
                            if ($(this).is(':checked')) {
                                d.push(data[$(this).attr("name").substr(4, 1)]);
                            }
                        });
                        if (d.length > 0) {
                            if (plot2) {
                                plot2.setData(d);
                                plot2.draw();
                            } else {
                                plot2 = $.plot(target, d, options);
                            }
                        }

                    };

                    toggles.find(':checkbox').on('change', function () {
                        plotNow();
                    });
                    plotNow()

                });

          
                /*
                 * FULL CALENDAR JS
                 */

                if ($("#calendar").length) {
                    var date = new Date();
                    var d = date.getDate();
                    var m = date.getMonth();
                    var y = date.getFullYear();

                    var calendar = $('#calendar').fullCalendar({

                        editable: false,
                        draggable: false,
                        selectable: false,
                        selectHelper: false,
                        unselectAuto: false,
                        disableResizing: false,

                        header: {
                            left: 'title', //,today
                            center: 'prev, next, today',
                            right: 'month, agendaWeek, agenDay' //month, agendaDay,
                        },

                        select: function (start, end, allDay) {
                            var title = prompt('Event Title:');
                            if (title) {
                                calendar.fullCalendar('renderEvent', {
                                    title: title,
                                    start: start,
                                    end: end,
                                    allDay: allDay
                                }, true // make the event "stick"
                                );
                            }
                            calendar.fullCalendar('unselect');
                        },

                        eventRender: function (event, element, icon) {
                            if (!event.description == "") {
                                element.find('.fc-event-title').append("<br/><span class='ultra-light'>" + event.description + "</span>");
                            }
                            if (!event.icon == "") {
                                element.find('.fc-event-title').append("<i class='air air-top-right fa " + event.icon + " '></i>");
                            }
                        }
                    });

                };

                /* hide default buttons */
                $('.fc-header-right, .fc-header-center').hide();

                // calendar prev
                $('#calendar-buttons #btn-prev').click(function () {
                    $('.fc-button-prev').click();
                    return false;
                });

                // calendar next
                $('#calendar-buttons #btn-next').click(function () {
                    $('.fc-button-next').click();
                    return false;
                });

                // calendar today
                $('#calendar-buttons #btn-today').click(function () {
                    $('.fc-button-today').click();
                    return false;
                });

                // calendar month
                $('#mt').click(function () {
                    $('#calendar').fullCalendar('changeView', 'month');
                });

                // calendar agenda week
                $('#ag').click(function () {
                    $('#calendar').fullCalendar('changeView', 'agendaWeek');
                });

                // calendar agenda day
                $('#td').click(function () {
                    $('#calendar').fullCalendar('changeView', 'agendaDay');
                });

            });

    </script>
}